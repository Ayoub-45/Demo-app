/*
 * Library API Spec
 * This is an API for a library project that will be used in our SLO course.
 *
 * OpenAPI spec version: v0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.75
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";

/**
* Book service.
* @module api/BookApi
* @version v0.0.1
*/
export default class BookApi {

    /**
    * Constructs a new BookApi. 
    * @alias module:api/BookApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createBook operation.
     * @callback moduleapi/BookApi~createBookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/BookApi~createBookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createBook(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/book', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteBook operation.
     * @callback moduleapi/BookApi~deleteBookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/null}  
     * @param {module:api/BookApi~deleteBookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBook(, callback) {
      
      let postBody = null;
      // verify the required parameter '' is set
      if ( === undefined ||  === null) {
        throw new Error("Missing the required parameter '' when calling deleteBook");
      }

      let pathParams = {
        'bookID': 
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/book/{bookID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBookById operation.
     * @callback moduleapi/BookApi~getBookByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/null}  The unique identifier of the book to retrieve.
     * @param {module:api/BookApi~getBookByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBookById(, callback) {
      
      let postBody = null;
      // verify the required parameter '' is set
      if ( === undefined ||  === null) {
        throw new Error("Missing the required parameter '' when calling getBookById");
      }

      let pathParams = {
        'bookID': 
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/book/{bookID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listBooks operation.
     * @callback moduleapi/BookApi~listBooksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/BookApi~listBooksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listBooks(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/book', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateBook operation.
     * @callback moduleapi/BookApi~updateBookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/null}  The unique identifier of the book to update.
     * @param {module:api/BookApi~updateBookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBook(, callback) {
      
      let postBody = null;
      // verify the required parameter '' is set
      if ( === undefined ||  === null) {
        throw new Error("Missing the required parameter '' when calling updateBook");
      }

      let pathParams = {
        'bookID': 
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/book/{bookID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}